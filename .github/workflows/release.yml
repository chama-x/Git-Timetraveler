name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: |
            # üéâ Git Time Traveler v${{ github.ref_name }}
            
            Create GitHub repositories with backdated commits to enhance your contribution graph!
            
            ## ‚ú® Features
            
            - **üöÄ Fast & Lightweight**: Written in Rust for optimal performance (~3.7MB binary)
            - **üéØ Cross-platform**: Works on macOS, Windows, and Linux (x64 and ARM64)
            - **üîí Secure**: Uses GitHub personal access tokens
            - **üìÖ Flexible dates**: Support for single years, ranges, or lists
            - **üé® Interactive UI**: User-friendly prompts with smart defaults
            - **üîç Dry run mode**: Preview operations before execution
            - **üì¶ Zero dependencies**: Self-contained executable
            - **‚ö° NPX support**: Easy installation with `npx git-timetraveler`
            
            ## üõ†Ô∏è Installation
            
            ### Via NPX (Recommended)
            ```bash
            # Interactive mode
            npx git-timetraveler
            
            # Non-interactive mode
            npx git-timetraveler --no-menu --username myuser --token ghp_xxx --repo myrepo --year 1990
            ```
            
            ### Via NPM
            ```bash
            npm install -g git-timetraveler
            git-timetraveler
            ```
            
            ### Direct Binary Download
            Download the appropriate binary for your platform from the assets below:
            - **Linux x64**: `git-timetraveler-x86_64-unknown-linux-gnu.tar.gz`
            - **Linux ARM64**: `git-timetraveler-aarch64-unknown-linux-gnu.tar.gz`
            - **macOS Intel**: `git-timetraveler-x86_64-apple-darwin.tar.gz`
            - **macOS Apple Silicon**: `git-timetraveler-aarch64-apple-darwin.tar.gz`
            - **Windows x64**: `git-timetraveler-x86_64-pc-windows-msvc.tar.gz`
            - **Windows ARM64**: `git-timetraveler-aarch64-pc-windows-msvc.tar.gz`
            
            ## üìñ Usage Examples
            
            ```bash
            # Interactive mode (recommended for first-time users)
            git-timetraveler
            
            # Single year
            git-timetraveler --no-menu --username myuser --token ghp_xxx --repo myrepo --year 1990
            
            # Year range
            git-timetraveler --no-menu --username myuser --token ghp_xxx --repo myrepo --years 1990-1995
            
            # Specific years
            git-timetraveler --no-menu --username myuser --token ghp_xxx --repo myrepo --years 1990,1992,1994
            
            # Dry run mode
            git-timetraveler --dry-run --no-menu --username myuser --token ghp_xxx --repo myrepo --year 1990
            ```
            
            ## üîß Technical Details
            
            - **Language**: Rust 2021 edition
            - **Binary Size**: ~3.7MB (optimized for size)
            - **Startup Time**: Sub-100ms
            - **Dependencies**: Zero runtime dependencies
            - **Testing**: 12 integration tests with 100% pass rate
            
            ## üìö Links
            
            - [NPM Package](https://www.npmjs.com/package/git-timetraveler)
            - [Documentation](https://github.com/chama-x/Git-Timetraveler#readme)
            - [Report Issues](https://github.com/chama-x/Git-Timetraveler/issues)
          draft: false
          prerelease: false

  build-and-upload:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: git-timetraveler
            asset_name: git-timetraveler-x86_64-unknown-linux-gnu.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: git-timetraveler
            asset_name: git-timetraveler-aarch64-unknown-linux-gnu.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: git-timetraveler.exe
            asset_name: git-timetraveler-x86_64-pc-windows-msvc.tar.gz
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            binary_name: git-timetraveler.exe
            asset_name: git-timetraveler-aarch64-pc-windows-msvc.tar.gz
          - os: macos-13
            target: x86_64-apple-darwin
            binary_name: git-timetraveler
            asset_name: git-timetraveler-x86_64-apple-darwin.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: git-timetraveler
            asset_name: git-timetraveler-aarch64-apple-darwin.tar.gz

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Linux x64)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Install cross-compilation tool and dependencies (Linux ARM64)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          # Only install if not already present
          if ! brew list openssl &>/dev/null; then
            brew install openssl
          fi
          if ! brew list pkg-config &>/dev/null; then
            brew install pkg-config
          fi

      - name: Build binary (native)
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: |
          echo "Building for ${{ matrix.target }}..."
          cargo build --release --target ${{ matrix.target }}

      - name: Build binary (cross-compile Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "Cross-compiling for ${{ matrix.target }}..."
          cross build --release --target ${{ matrix.target }}

      - name: Verify binary exists
        run: |
          BINARY_PATH="target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
          if [ -f "$BINARY_PATH" ]; then
            echo "‚úÖ Binary found at $BINARY_PATH"
            ls -la "$BINARY_PATH"
          else
            echo "‚ùå Binary not found at $BINARY_PATH"
            echo "Contents of target/${{ matrix.target }}/release/:"
            ls -la "target/${{ matrix.target }}/release/" || echo "Directory does not exist"
            exit 1
          fi

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release-assets
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release-assets/

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Force -Path release-assets
          Copy-Item target/${{ matrix.target }}/release/${{ matrix.binary_name }} release-assets/

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd release-assets
          tar -czf ../${{ matrix.asset_name }} ${{ matrix.binary_name }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd release-assets
          tar -czf ../${{ matrix.asset_name }} ${{ matrix.binary_name }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.asset_name }} 